contour
?contour
seq(-2,3,by=0.05)
y<-seq(-1,7,by=0.05)
c<-(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)
f<-function(x,y) x^4-2*x^2*y+x^2-2*x*y+2*y^2+9*x/2-4*y+4
z<-outer(x, y, f)
contour(x,y,z,levels=(c),col="blue")
x<-seq(-2,3,by=0.05)
y<-seq(-1,7,by=0.05)
c<-(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)
f<-function(x,y) x^4-2*x^2*y+x^2-2*x*y+2*y^2+9*x/2-4*y+4
z<-outer(x, y, f)
x
y
c
c<-(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)
c
c<-(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)c<-c(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)
c<-c(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)
c
x<-seq(-2,3,by=0.05)
y<-seq(-1,7,by=0.05)
t<-c(0,1,2,3,4,5,10,15,20,30,40,50,60,80,100)
f<-function(x,y) x^4-2*x^2*y+x^2-2*x*y+2*y^2+9*x/2-4*y+4
z<-outer(x, y, f)
contour(x,y,z,levels=t,col="blue")
x<1:7
x
x<-1:7
x
x[which(x>4)]
plot(pnorm(x, mean(x), sd(x), lower.tail = TRUE, log.p = FALSE),type='l')
pnorm(10)
pnorm(1:100)
norm(1:100)
rnorm(1:100)
plot(rnorm(1:100))
plot(rnorm(1:100))
plot(density(rnorm(1:100)))
plot(density(rnorm(1:500)))
?pnorm
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(1:500, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
pnorm(1:500, mean=10, sd = 1, lower.tail = TRUE, log.p = FALSE)
dnorm(0) == 1/ sqrt(2*pi)
dnorm(0)
dnorm(1:500)
dnorm(1:500,m=10,sd=5)
rnorm(1:500,m=10,sd=5)
plot(rnorm(1:500,m=10,sd=5))
plot(density(rnorm(1:500,m=10,sd=5)))
w <- c(75.0, 64.0, 47.4, 66.9, 62.2, 62.2, 58.7, 63.5,
66.6, 64.0, 57.0, 69.0, 56.9, 50.0, 72.0)
hist(w, freq = FALSE)
lines(density(w), col = "blue")
x <- 44:76
lines(x, dnorm(x, mean(w), sd(w)), col = "red")
logit
glm
?glm
lm
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2,10,20, labels=c("Ctl","Trt"))
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
x<-c(0.10,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.20,0.21,0.23)
y<-c(42.0,43.5,45.0,45.5,45.0,47.5,49.0,53.0,50.0,55.0,55.0,60.0)
lm.sol<-lm(y ~ 1+x)
summary(lm.sol)
x<-c(0.10,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.20,0.21,0.23)
y<-c(42.0,43.5,45.0,45.5,45.0,47.5,49.0,53.0,50.0,55.0,55.0,60.0)
x
y
plot(x,y)
lm.sol<-lm(y ~ 1+x)
lm.sol
summary(lm.sol)
abline(lm.sol)
plot(lm.sol)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
setwd("D:/workspace/datamining/competition/r")
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
library(stringr)
source("db.r",encoding="utf-8")
getQuiz<-function(sid,uid){
sql<-paste("select qid from t_quiz_submit where id=",sid,"AND player_id=",uid)
qid=query(sql)[[1]]
qid
}
getData<-function(qid,type){
sql<-paste(" select file from t_quiz_data where qid= ",qid," and type = ",type)
file=query(sql)[[1]]
data<-read.csv(file,header=FALSE,encoding="utf-8",sep=",")
data
}
getCategory<-function(qid){
sql<-paste("select category from t_quiz where id=",qid)
category<-query(sql)[[1]]
category
}
userCode<-function(sid){
sql<-paste("select code from t_quiz_submit where id=",sid)
code=query(sql)[[1]]
lines<-str_split(code,'\r\n')[[1]]
for(line in lines){
eval(parse(text=line))
}
answer
}
# status<-c("INIT","RUNNING","FINISH")
# result<-c("INIT","ERROR","CORRECT","PROBABILITY","COMPILE")
statusFinish<-function(sid,result,p=0,des=''){
if(result=='PROBABILITY')
result<-p
sql<-paste("UPDATE t_quiz_submit",
"SET result='",result,"',description='",des,"'",
"WHERE id=",sid)
update(sql)
}
#精确匹配(算法)=======================
#data
# 1
# answer<-apply(data,1,sum);
# 2
# n<-nrow(data)
# answer<-rep(0,n)
# for(i in 1:n){
#   answer[i]<-sum(data[i,])
# }
category1<-function(qid,answer){
result<-getData(qid,2)
comp<-answer==result
t<-0
if(length(which(comp))==length(comp)){t=1}
t
}
# qid=17
# uid=3
# data<-getData(qid,1);
# answer<-userCode(qid,uid)
# cate<-getCategory(qid)#算法类别
#概率匹配(分类)=======================
# 1
# answer<-rep(0,length(data))
# answer[which(data>=50)]<-1
category2<-function(qid,answer){
result<-getData(qid,2)
t<-length(which(result==answer))/length(result)*100
t
}
# qid=19
# uid=3
# data<-getData(qid,1);
# answer<-userCode(qid,uid)
# cate<-getCategory(qid)#算法类别
#区间匹配(预测)=======================
# 1
# x=0.24
# l<-lm(V2~1+V1,data=data)
# new<-data.frame(V1=c(x))
# pred<-predict(l,new,interval = "prediction")
# answer<-pred[1]
category3<-function(qid,answer){
result<-getData(qid,2)
t=1
if(answer>=result$V1 && answer<=result$V2){
t=1
}
t
}
sid<-1
uid<-3
qid<-getQuiz(sid,uid)
data<-getData(qid,1)
answer<--999
answer<-userCode(sid)
cate<-getCategory(qid)#算法类别
print(ls())
if(cate==1){#精确匹配
t<-category1(qid,answer)
if(t==1) {
statusFinish(sid,'CORRECT')
} else {
statusFinish(sid,'ERROR')
}
}else if(cate==2){#概率匹配
t<-category2(qid,answer)
if(t>10) {
statusFinish(sid,'PROBABILITY',t)
}else{
statusFinish(sid,'ERROR')
}
}else if(cate==3){#区间匹配
t<-category3(qid,answer)
if(t==1) {
statusFinish(sid,'CORRECT')
}else{
statusFinish(sid,'ERROR')
}
}
rm(list=ls())
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
ls
ls()
print(ls())
for(l in ls()){
print(l)
}
fix(answer)
answer
print(answer)
for(l in ls()){
print(l)
print(eval(parse(text=l)))
}
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
?dbCommit
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
rm(list=ls())
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
source("db.r")
sql<-paste("update t_quiz_submit",
"set status = 'RUNNING'",
"where qid=17 and player_id=3")
update(sql)
ansert
rm(list=ls())
library(stringr)
source("db.r",encoding="utf-8")
source("answer.r",encoding="utf-8")
source("category.r",encoding="utf-8")
uid<-3
final<--1
sid<-1
category<-1
answer<--999
qid<-17
testFile<-"D:/workspace/datamining/competition-php/metadata/data/17/test.csv"
data<-read.csv(testFile,header=FALSE,encoding="utf-8",sep=",")
data
answer<-userCode(sid)
answer
if(category==1){#精确匹配
final<-category1(qid,answer)
#   if(t==1) {
#     statusFinish(sid,'CORRECT')
#   } else {
#     statusFinish(sid,'ERROR')
#   }
}else if(category==2){#概率匹配
final<-category2(qid,answer)
#   if(t>10) {
#     statusFinish(sid,'PROBABILITY',t)
#   }else{
#     statusFinish(sid,'ERROR')
#   }
}else if(category==3){#区间匹配
final<-category3(qid,answer)
#   if(t==1) {
#     statusFinish(sid,'CORRECT')
#   }else{
#     statusFinish(sid,'ERROR')
#   }
}
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
final
cat(final)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
print(cat(final))
print(cat(final))
sys.time()
sys.status
sys.status()
time
time()
time(10)
options()
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
source.with.encoding('D:/workspace/datamining/competition/r/quiz.r', encoding='UTF-8', echo=TRUE)
